@model BusinessObjects.Models.Showtime
@using System.Text.Json
@using BusinessObjects.Models;
@using System.Security.Claims
@{
    ViewData["Title"] = "Movie Seat Booking";
    string rows = "ABCDEFGHIJKLMN";
    List<Seat> Seats = Model.Auditorium.Seats.ToList();
    Movie movie = Model.Movie;
    List<Showtime> showtimes = movie.Showtimes.ToList();
    int curIndex = 0;
}
@section Styles {
    <link rel="stylesheet" href="~/css/Auditorium.css" asp-append-version="true" />
}
<div class="Auditorium-page">
    <div class="movie-booking">
        <!-- Progress Bar - Updated structure -->
        <div class="progress-container">
            <div class="progress-bar">
                <div class="progress-line"></div>
                <div class="step completed">Chọn phim/Rạp/Suất</div>
                <div class="step active">Chọn ghế</div>
                <div class="step">Thanh toán</div>
                <div class="step">Xác nhận</div>
            </div>
        </div>
        <div class="main-content">
            <!-- Left Section -->
            <div class="left-section">
                <!-- Showtime Selection -->
                <div class="showtime-selection">
                    <h3>Đổi  suất chiếu</h3>
                    <div class="showtime-buttons">
                        @for ( int i = 0; i < showtimes.Count(); i++ )
                        {
                            @if (showtimes[i].ShowtimeId == Model.ShowtimeId )
                            {
                                <button class="time-btn active" data-timeid="@showtimes[i].ShowtimeId">@showtimes[i].ShowTime</button>
                            } else
                            {
                                <form asp-asp-controller="Auditorium" asp-action="Auditorium" method="get">
                                    <input type="hidden" name="ShowtimeId" value="@showtimes[i].ShowtimeId" />
                                    <button type="submit" class="time-btn">@showtimes[i].ShowTime</button>
                                </form>
                            }
                        }
                    </div>
                </div>
                <div class="seat-grid-container">
                    <div class="seat-grid-header">
                        @for ( int i = 1; i <= Model.Auditorium.ColumnNumber; i++ )
                        {
                            <div class="seat-col-number">@i</div>
                        }
                    </div>
                    <div class="seat-grid" id="seat-grid">
                        @for (int i = 0; i < rows.Length; i++)
                        {
                            <div class="seat-row">
                                <div class="seat-row-letter">@rows[i]</div>
                                @for (int j = 0; j < Model.Auditorium.ColumnNumber; j++, curIndex++)
                                {
                                    <div class="SeatType" data-type="@Seats[curIndex].SeatType" data-id="@Seats[curIndex].SeatId" data-seatsold="@Seats[curIndex].IsAvailable"
                                         onclick="handleSeatClick(@Seats[curIndex].SeatId,@Seats[curIndex].IsAvailable.ToString().ToLower())" data-seatnumber="@Seats[curIndex].SeatNumber" data-seatprice="@Seats[curIndex].SeatTypeNavigation.Price"></div>
                                }
                            </div>
                        }
                    </div>
                </div>
                <div class="screen">
                    <div class="screen-label">MÀN HÌNH</div>
                </div>
                <div class="seat-legend">
                    <div class="legend-item">
                        <div class="legend-box normal"></div>
                        <span>Ghế thường</span>
                    </div>
                    <div class="legend-item">
                        <div class="legend-box vip"></div>
                        <span>Ghế VIP</span>
                    </div>
                    <div class="legend-item">
                        <div class="legend-box couple"></div>
                        <span>Ghế couple</span>
                    </div>
                    <div class="legend-item">
                        <div class="legend-box sold"></div>
                        <span>Ghế đã bán</span>
                    </div>
                    <div class="legend-item">
                        <div class="legend-box selected"></div>
                        <span>Ghế đang chọn</span>
                    </div>
                    <div class="legend-item">
                        <div class="legend-box unavailable"></div>
                        <span>Ghế không khả dụng</span>
                    </div>
                </div>
            </div>
            <!-- Right Section -->
            <div class="right-section">
                <div class="movie-details">
                    <div class="movie-poster">
                        <img src=@movie.PosterUrl alt="Movie Poster" />
                    </div>
                    <div class="movie-info">
                        <h2>@movie.Title</h2>
                        <div class="movie-tag">@movie.Format @movie.Language</div>
                        <div class="theater-info">@Model.Auditorium.Theater.TheaterName - @Model.Auditorium.AuditoriumName</div>
                        <div class="showtime-info">
                            Suất chiếu: <strong id="current-time">@Model.ShowTime</strong>, Hôm nay
                        </div>
                    </div>
                </div>
                <div class="booking-details">
                    <div class="selected-seats" id="selected-seats-container">
                        <!-- Selected seats will be displayed by JavaScript -->
                    </div>
                    <div class="total-section">
                        <div class="total-label">Tổng cộng:</div>
                        <div class="total-price" id="total-price">0vnđ</div>
                    </div>
                    <div class="action-buttons">
                        <form asp-controller="MoviesUser" asp-action="DetailFilm" method="get">
                            <input type="hidden" name="id" value="@movie.MovieId" />
                            <button class="back-btn">Quay lại</button>
                        </form>
                        <button class="payment-btn">Thanh toán</button>
                    </div>
                </div>
            </div>
        </div>

        <div id="payment-confirm" class="popup-information-book-ticket">
            <div class="information-book-ticket">
                <h1 class="title-indformation-book-ticket-popup">THÔNG TIN ĐẶT VÉ</h1>
                <div class="h-50">
                    <div class="detail-book-ticket-popup">
                        <div class="text-detail-book-ticket-popup">Phim</div>
                        <div class="infor-detail-book-ticket-popup">
                            <h3 class="header-infor-detail-book-ticket-popup">@movie.Title</h3>
                            <p class="description-infor-detail-book-ticket-popup">@movie.Format @movie.Language</p>
                        </div>
                    </div>
                    <div class="detail-book-ticket-popup">
                        <div class="text-detail-book-ticket-popup">Rạp</div>
                        <div class="infor-detail-book-ticket-popup">
                            <h3 class="header-infor-detail-book-ticket-popup">@Model.Auditorium.Theater.TheaterName</h3>
                            <p class="description-infor-detail-book-ticket-popup">Suất: @Model.ShowTime</p>
                        </div>
                    </div>
                    <div class="detail-book-ticket-popup">
                        <div class="text-detail-book-ticket-popup">Chi tiet</div>
                        <div class="infor-detail-book-ticket-popup">
                            <p id="description-infor-detail-book-ticket-popup" class="description-infor-detail-book-ticket-popup">@Model.Auditorium.AuditoriumName, ghế G4, G5</p>
                        </div>
                    </div>
                </div>
                <div class="total-confirm-pay-ticket">
                    <div class="total-ticket">
                        <div class="text-detail-book-ticket-popup">Tổng</div>
                        <div id="price-detail-book-ticket" class="price-detail-book-ticket">220.000VND</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
   <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
         const divs = document.querySelectorAll(".SeatType");
         let selectedIds = [];
        let lockedSeatIds = [];
        let currentStep = 2;
         window.connection = new signalR.HubConnectionBuilder()
                            .withUrl("/seathub")
                            .build();
        connection.on("ReceiveLockedSeats", function (ids) {
		     console.log("Received locked seats:", ids);
             lockedSeatIds = [...new Set([...lockedSeatIds, ...ids])];
             updateSeatUI();
        });

        connection.on("ReceiveUnlockedSeats", function (ids) {
           console.log("Received unlocked seats:", ids);
             lockedSeatIds = lockedSeatIds.filter(id => !ids.includes(id));
             updateSeatUI();
        });
      connection.on("ReceiveUpdatedSeats", function (selectedIds) {
        console.log("Received updated seats:", selectedIds);
          // selectedIds = updateselectedIds;
           divs.forEach(div => {
             const seatTypeValue = div.dataset.type;
             const seatId = Number(div.dataset.id);
             const isAvailable = div.dataset.seatsold;
             function getSeatClass(seatType, isAvailable) {
                 if (isAvailable === "False") return "seat sold";
                 if (seatType === "Seat_VIP") return "seat vip";
                 if (seatType === "Seat_Deluxe") return "seat vip";
                 if (seatType === "Seat_Couple") return "seat couple";
                 return "seat normal";
             }
             if ( selectedIds.includes(seatId) ) {
                 div.className = "seat selected";
             } else {
                 div.className = getSeatClass(seatTypeValue, isAvailable);
             }
           });
          updateSeatGrid();
           updateSelectedSeatsDisplay();
           updateTotalPrice();
        });


         connection.start().then(() => {
             console.log("connect signalr success");
         });
         function updateProgressBar() {
             const progressLine = document.querySelector('.progress-line');
             const percentage = ((currentStep - 1) / 3) * 100 + 4;
             progressLine.style.width = `${percentage}%`;
             // Update step states
             const steps = document.querySelectorAll('.step');
             steps.forEach((step, index) => {
               if (index + 1 < currentStep) {
                 step.classList.add('completed');
                 step.classList.remove('active');
               } else if (index + 1 === currentStep) {
                 step.classList.add('active');
                 step.classList.remove('completed');
               } else {
                 step.classList.remove('active', 'completed');
               }
             });
         }
         function handleSeatClick(seatId,isAvailable) {
             if (!isAvailable) return;
             if ( !selectedIds.includes(seatId) ) {
                   selectedIds.push(seatId);
             } else {
                    selectedIds = selectedIds.filter(seat => seat !== seatId);
             }
              connection.invoke("UpdateSeat", selectedIds);
              updateSeatGrid();
              updateSelectedSeatsDisplay();
              updateTotalPrice();
         }
         function getSeatNumberById(seat) {
             let seatNumbers = [];
            divs.forEach(div => {
               const seatId = Number(div.dataset.id);
               if ( seat.includes(seatId) ) {
                    const SeatNumber = div.dataset.seatnumber;
					 seatNumbers.push(SeatNumber);
               }
            });
			 return seatNumbers.join(', ');
         }
         function updateSeatGrid() {
            divs.forEach(div => {
              const seatTypeValue = div.dataset.type;
              const seatId = Number(div.dataset.id);
              const isAvailable = div.dataset.seatsold;
              function getSeatClass(seatType, isAvailable) {
                  if (isAvailable === "False") return "seat sold";
                  if (seatType === "Seat_VIP") return "seat vip";
                  if (seatType === "Seat_Deluxe") return "seat vip";
                  if (seatType === "Seat_Couple") return "seat couple";
                  return "seat normal";
              }
              if ( selectedIds.includes(seatId) ) {
                  div.className = "seat selected";
              } else {
                  div.className = getSeatClass(seatTypeValue, isAvailable);
              }
            });
          }
       function updateSeatUI() {
           divs.forEach(div => {
             const seatId = Number(div.dataset.id);
            const seatTypeValue = div.dataset.type;
             const isAvailable = div.dataset.seatsold;
             function getSeatClass(seatType, isAvailable) {
                 if (isAvailable === "False") return "seat sold";
                 if (seatType === "Seat_VIP") return "seat vip";
                 if (seatType === "Seat_Deluxe") return "seat vip";
                 if (seatType === "Seat_Couple") return "seat couple";
                 return "seat normal";
             }
           console.log("lock seat ui", lockedSeatIds);
             if (lockedSeatIds.includes(seatId)) {
              div.className = "seat sold";
             } else {
               div.className =  getSeatClass(seatTypeValue, isAvailable);
             }
           });
         }
          function updateSelectedSeatsDisplay() {
             const container = document.getElementById('selected-seats-container');
             container.innerHTML = '';
             if (selectedIds.length > 0) {
               const seatTypeElement = document.createElement('div');
               seatTypeElement.className = 'seat-type';
               container.appendChild(seatTypeElement);
               const seatIdElement = document.createElement('div');
               seatIdElement.className = 'seat-id';
               seatIdElement.textContent = `Ghế - ${getSeatNumberById(selectedIds)}`;
               container.appendChild(seatIdElement);
             }
           }
          function updateTotalPrice() {
             const totalPrice = calculateTotal();
             document.getElementById('total-price').textContent = `${formatNumber(totalPrice)}vnđ`;
            }
          function calculateTotal() {
             if ( selectedIds.length <= 0 ) {
                  return 0;
             } else {
                  let total = 0;
                  const audiPrice = @Model.Auditorium.AuditoriumTypeNavigation.Price;
                  divs.forEach(div => {
                   const seatId = Number(div.dataset.id);
                   if ( selectedIds.includes(seatId) ) {
                     const seatPrice = Number(div.dataset.seatprice) + Number(audiPrice);
                     total += seatPrice;
                   }
                  });
                  return Number(total);
              }
            }
          function formatNumber(num) {
             return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
          }
       function submitFormPost(selectedIds, total, showtimeId, userId, username) {
            const form = document.createElement("form");
            form.method = "POST";  
            form.action = '@Url.Action("OnPay", "Auditorium")';

            selectedIds.forEach(id => {
               const inputSeatId = document.createElement("input");
               inputSeatId.type = "hidden";
               inputSeatId.name = "listSeat[]";
               inputSeatId.value = id;
			   form.appendChild(inputSeatId);
            });
            // Total amount
            const Total = document.createElement("input");
            Total.type = "hidden";
            Total.name = "total"; 
            Total.value = total;
            form.appendChild(Total);

            //ShowtimeId
            const ShowtimeId = document.createElement("input");
           ShowtimeId.type = "hidden";
           ShowtimeId.name = "ShowtimeId";
           ShowtimeId.value = showtimeId;
           form.appendChild(ShowtimeId);
            // User
           const UserId = document.createElement("input");
           UserId.type = "hidden";
           UserId.name = "UserId";
           UserId.value = userId;
          form.appendChild(UserId);
            // VnPay Info
             const Name = document.createElement("input");
            Name.type = "hidden";
            Name.name = "Name";  
            Name.value = username;
            // Name.value = "Linh";
            form.appendChild(Name);

            const OrderDescription = document.createElement("input");
            OrderDescription.type = "hidden";
            OrderDescription.name = "OrderDescription";  // Mô tả đơn hàng
            OrderDescription.value = "Thanh toan qua Vnpay";
            form.appendChild(OrderDescription);

            const OrderType = document.createElement("input");
            OrderType.type = "hidden";
            OrderType.name = "OrderType";  // Loại đơn hàng
            OrderType.value = "other";
            form.appendChild(OrderType);

            document.body.appendChild(form);
            form.submit();  
          }
         
     
     document.addEventListener("DOMContentLoaded", function () {
       updateSeatGrid();
       updateProgressBar()
     });
     document.querySelector('.payment-btn').addEventListener('click', async function() {
         if ( selectedIds.length <= 0 ) {
              alert("Chưa chọn ghế nào");
              return;
         }

        let total = calculateTotal();
        const timeFrameSelected = document.querySelector('.time-btn.active'); // Find the active button

       if (timeFrameSelected) {
           const timeId = timeFrameSelected.dataset.timeid; // Get data-timeid from active button
            console.log(`Selected time ID: ${timeId}`);
           const userId = "@User.FindFirstValue(ClaimTypes.NameIdentifier)" > 0 ? "@User.FindFirstValue(ClaimTypes.NameIdentifier)":1 ; // temp solution without login for testing
           const username = @Html.Raw(Json.Serialize(User.FindFirstValue(ClaimTypes.Name)));
           connection.invoke("LockSeats", selectedIds);
           submitFormPost(selectedIds, total, timeId, userId,username);
        } else {
            alert('No active button found!'); // Show alert if no active button
        }
       
     });
    </script>


